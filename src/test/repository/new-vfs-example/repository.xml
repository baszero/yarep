<?xml version="1.0"?>

<repository class="org.wyona.yarep.impl.repo.vfs.VirtualFileSystemRepository">
  <name>New Virtual Filesystem Example</name>

  <content src="content">
    <!-- Ignore patterns are optional -->
    <ignore pattern=".*\.svn"/>
    <ignore pattern=".*\.yarep"/>
  </content>

  <!-- Optional elements below: -->

  <!-- If the "meta" parameter below is not being set, then the meta data will also be written into the content directory configured above. -->
  <meta src="meta"/>

  <directory alternative="index.html" mime-type="application/xhtml+xml"/>
<!--
  <directory alternative="index.html"/>
-->
<!--
  <directory mime-type="application/xhtml+xml"/>
-->

<!-- DEPRECATED (please see below)
  <search-index src="/home/michi/src/nutch/build/crawl_mailing_list_yanel_usage/index">
-->

<!-- The attribute local-tika-config is used to patch the default tika config -->
<!-- Also see org/apache/tika/tika-config.xml within Tika jar -->
<!-- DEPRECATED (please see below)
  <search-index src="index" index-fulltext="yes" index-properties="yes" local-tika-config="tika-config.xml" write-lock-timeout="3000" auto="true">
  </search-index>
-->

  <s:search-index xmlns:s="http://www.wyona.org/yarep/search/2.0" indexer-class="org.wyona.yarep.impl.search.lucene.LuceneIndexer" searcher-class="org.wyona.yarep.impl.search.lucene.LuceneSearcher">
    <index-location file="search-index"/> <!-- INFO: Because of backwards compatibility the fulltext index will be assumed to be located within the root directory, but if a sub-directory 'search-index/fulltext' exists, then this will be used. The properties index is always located within the sub-directory 'search-index/properties' -->
    <repo-auto-index-fulltext boolean="true"/>
    <repo-auto-index-properties boolean="true"/>
    <lucene>
      <!-- The element 'local-tika-config' attribute 'file' is used to patch the default tika config -->
      <local-tika-config file="tika-config.xml"/>

      <!-- if fulltext-analyzer/class is not set it will use org.apache.lucene.analysis.standard.StandardAnalyzer-->
      <fulltext-analyzer class="org.apache.lucene.analysis.standard.StandardAnalyzer"/>

      <!-- if property-analyzer/class is not set it will use org.apache.lucene.analysis.WhitespaceAnalyzer-->
      <property-analyzer class="org.apache.lucene.analysis.WhitespaceAnalyzer"/>

      <write-lock-timeout ms="3000"/>
    </lucene>
  </s:search-index>
  
  <!--
       Various filesystems have a limit on the number of files per directory (e.g. 35K).
       By splitting the paths one can workaround potential issues with too many files per directory.
       The 'splitpath' section/element defines how paths are split into subdirectories, whereas
       the following attributes can be set/configured:

         - depth:  denotes how many splits are performed (at most)
         - length: denotes how long a single segment is (we recommend to set length to 2 because this should make sure to stay below 35'000 files per directory, assuming one uses 26 characters and 10 numbers, which means 36x36=1296 < 35000)
         - escape: denotes by what character a path separator ("/") should be replaced during splitting

       The 'include' element defines which paths should be split; only paths
       starting with any of the include paths are split.

       Example: depth = 2, length = 2, escape = +, include = /foobar/
         The path '/foobar/helloworld.txt' becomes '/foobar/he/ll/oworld.txt'
         and '/foobar/fo/bar.txt' becomes '/foobar/fo/-b/ar.txt'
         and '/lorem/ipsum.txt' does not change as it does not start with '/foobar/'

       NOTE: The order of the include values (comma separated) matter, which means if '/foo' comes
             before '/foo/bar', then '/foo/bar' is never reached.
  -->
  <splitpath depth="3" length="2" escape="+">
    <include path="/splitpath-example/"/>
<!-- NOTE: Apply splitpath to all files
    <include path="/"/>
-->
  </splitpath>

</repository>
