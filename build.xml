<?xml version="1.0"?>

<project name="yarep" default="usage"
 xmlns:artifact="antlib:org.apache.maven.artifact.ant"
 xmlns:wyona-tools="http://www.wyona.org/tools/1.0"
>
  <import file="tools/apache-ant_extras/artifacts.build.xml"/>

  <import file="dependencies.xml"/>

  <target name="usage" description="How to see all the targets">
    <echo>USAGE: ant -projecthelp</echo>
    <echo>NOTE: Read the README.txt</echo>
  </target>

  <!-- Init all parameters and other settings. -->
  <target name="init" depends="dependencies">
    <property file="local.build.properties"/>
    <property file="build.properties"/>
    <property name="source.home" value="${basedir}"/>

    <property name="classes.dir" value="${build.dir}/classes"/>

    <path id="classpath.core">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${maven2.cp}"/>
    </path>

    <path id="classpath.impl">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${classes.dir}"/>
      <pathelement path="${maven2.cp}"/>
    </path>

    <path id="classpath.examples">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${classes.dir}"/>
      <pathelement path="${maven2.cp}"/>
    </path>

    <path id="classpath.run">
      <fileset dir="lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement path="${classes.dir}"/>
      <pathelement path="lib"/> <!-- log4j.properties -->
      <pathelement path="build/repository"/> <!-- repository configs -->
      <pathelement path="${maven2.cp}"/>
    </path>
  </target>

  <target name="compile-core" description="Compile Java classes" depends="init">
    <echo>INFO: Compiling with Java version ${ant.java.version} and building with Ant version ${ant.version}</echo>
    <echo>${classes.dir}</echo>
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="src/core" destdir="${classes.dir}"
           classpathref="classpath.core"
           debug="true"
           source="${source.java.version}"
           target="${target.java.version}"
    />
  </target>

  <target name="compile-impl" description="Compile Java classes of Implementation" depends="init">
    <echo>${classes.dir}</echo>
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="src/impl" destdir="${classes.dir}"
           classpathref="classpath.impl"
           debug="true"
    />
  </target>

  <target name="compile-examples" description="Compile Java classes of examples" depends="init,compile-core, compile-impl">
    <echo>${classes.dir}</echo>
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="src/test" destdir="${classes.dir}"
           classpathref="classpath.examples"
           debug="true"
           source="${source.java.version}"
           target="${target.java.version}"
    />
    <copy file="src/test/java/yarep.properties" todir="${classes.dir}"/>
  </target>

  <target name="eclipse:classpath" description="Update Eclipse's .classpath file" depends="init">
    <ant dir="${source.home}/tools/eclipse.settings" target="update-classpath"
     inheritAll="false" inheritRefs="false">
      <reference torefid="classpath.ref" refid="classpath.core"/>
      <property name="classpath.dir" value="${source.home}"/>
      <property name="classes.dir" value=""/>
      <property name="source.dirs" value="src/core/java:src/impl/java:src/test/java"/>
    </ant>
  </target>

  <target name="eclipse" description="Generate all files needed to use the project under Eclipse (WARNING: .project file will be overwritten!)" depends="eclipse:classpath">
    <copy file="${source.home}/tools/eclipse.settings/Eclipse-3.template.project" tofile="${source.home}/.project">
      <filterset>
        <filter token="PROJECT_NAME" value="Wyona Yarep"/>
        <filter token="PROJECT_VERSION" value="${yarep.version}-r${subversion.revision}"/>
        <filter token="GENERATION_COMMAND" value="build eclipse"/>
      </filterset>
    </copy>
    <echo>Eclipse project created: in Eclipse you can now import (as an existing project into your workspace) this project with root directory set to ${source.home} and build it there!</echo>
  </target>

  <target name="build-examples" description="Build examples" depends="init,compile-examples,compile-impl">
    <copy todir="${build.dir}/repository">
      <fileset dir="src/test/repository"/>
    </copy>

    <mkdir dir="build/lib"/>
  </target>

  <target name="jar" description="Create jar files for core and impl" depends="init,compile-core,compile-impl">
    <mkdir dir="build/lib"/>

    <jar
      destfile="build/lib/yarep-core-${yarep.version}-r${subversion.revision}.jar"
      basedir="build/classes"
      excludes="org/wyona/yarep/examples/**,org/wyona/yarep/tests/**,org/wyona/yarep/impl/**,org/wyona/yarep/core/impl/**,yarep.properties"
    >
    <!--
      <manifest>
        <attribute name="main-class" value="org.wyona.yarep.examples.HelloWorld"/>
      </manifest>
    -->
    </jar>

    <jar
      destfile="build/lib/yarep-impl-${yarep.version}-r${subversion.revision}.jar"
      basedir="build/classes"
      includes="org/wyona/yarep/impl/**,org/wyona/yarep/core/impl/**"
    >
    <!--
      <manifest>
        <attribute name="main-class" value="org.wyona.yarep.examples.HelloWorld"/>
      </manifest>
    -->
    </jar>
  </target>

  <target name="install-jars" description="Place jar files for core and impl into local maven repository" depends="clean, init, jar, patch-pom-files">
    <artifact:pom id="maven.project.core" file="build/lib/pom-core.xml"/>
  
    <artifact:install file="build/lib/yarep-core-${yarep.version}-r${subversion.revision}.jar">
      <pom refid="maven.project.core"/>
    </artifact:install>

    <artifact:pom id="maven.project.impl" file="build/lib/pom-impl.xml"/>
  
    <artifact:install file="build/lib/yarep-impl-${yarep.version}-r${subversion.revision}.jar">
      <pom refid="maven.project.impl"/>
    </artifact:install>
  </target>

  <!-- Install Yarep core JAR. Hidden because it's still a bit HACKy but please keep it as it's used to produce source JARs for debugging. -->
  <target name="install-core-jar" depends="compile-core">
    <wyona-tools:install-jar source-home="." name="yarep-core" version="${yarep.version}-r${subversion.revision}" package-root-path="org/wyona/yarep" id="core">
      <!--HACK: both source and binary JARs will get these: -->
      <fileset dir="./src/core" includes="org/wyona/yarep/core/**" excludes="org/wyona/yarep/core/impl/**"/>
      <fileset dir="${classes.dir}" includes="org/wyona/yarep/core/**" excludes="org/wyona/yarep/core/impl/**"/>
      <fileset dir="./src/core" includes="org/wyona/yarep/util/**"/>
      <fileset dir="${classes.dir}" includes="org/wyona/yarep/util/**"/>
    </wyona-tools:install-jar>
  </target>

  <!-- Install Yarep implementation JAR. Hidden because it's still a bit HACKy but please keep it as it's used to produce source JARs for debugging. -->
  <target name="install-impl-jar" depends="compile-impl">
    <wyona-tools:install-jar source-home="." name="yarep-impl" version="${yarep.version}-r${subversion.revision}" package-root-path="org/wyona/yarep" id="impl">
      <!--HACK: both source and binary JARs will get these: -->
      <fileset dir="./src/core" includes="org/wyona/yarep/core/impl/**"/>
      <fileset dir="${classes.dir}" includes="org/wyona/yarep/core/impl/**"/>
    </wyona-tools:install-jar>
  </target>

  <target name="deploy-jars" description="Upload jar files for core and impl into remote maven repository" depends="clean, init, jar, patch-pom-files">
    <!-- <artifact:install-provider artifactId="wagon-ssh" version="1.0-beta-2"/> -->
    <artifact:install-provider artifactId="wagon-ssh" version="1.0-alpha-7"/>
    
    <echo>deploying to ${repository.url}</echo>
    
    <artifact:pom id="maven.project.core" file="build/lib/pom-core.xml"/>
    
    <artifact:deploy file="build/lib/yarep-core-${yarep.version}-r${subversion.revision}.jar">
      <remoteRepository url="${repository.url}">
        <authentication username="${repository.username}" password="${repository.password}"/>
<!--
        <authentication username="${repository.username}" privateKey="${user.home}/.ssh/id_dsa"/>
-->
      </remoteRepository>
      <pom refid="maven.project.core"/>
    </artifact:deploy>
    
    <artifact:pom id="maven.project.impl" file="build/lib/pom-impl.xml"/>
    
    <artifact:deploy file="build/lib/yarep-impl-${yarep.version}-r${subversion.revision}.jar">
      <remoteRepository url="${repository.url}">
        <authentication username="${repository.username}" password="${repository.password}"/>
<!--
        <authentication username="${repository.username}" privateKey="${user.home}/.ssh/id_dsa"/>
-->
      </remoteRepository>
      <pom refid="maven.project.impl"/>
    </artifact:deploy>
  </target>
  
  <target name="patch-pom-files" depends="init">
    <copy file="src/core/pom.xml" tofile="build/lib/pom-core.xml"/>
    <replace file="build/lib/pom-core.xml" value="${yarep.version}-r${subversion.revision}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>
    
    <copy file="src/impl/pom.xml" tofile="build/lib/pom-impl.xml"/>
    <replace file="build/lib/pom-impl.xml" value="${yarep.version}-r${subversion.revision}">
      <replacetoken>@VERSION@</replacetoken>
    </replace>
  </target>
  
  <target name="clean" description="Clean Build" depends="init">
    <delete dir="${build.dir}"/>
  </target>

  <target name="run-examples" description="Run Example" depends="init, build-examples">
    <java classname="org.wyona.yarep.examples.HelloWorld">
<!--
    <java classname="org.wyona.yarep.examples.TestVirtualFileSystemRepository">
-->
      <classpath refid="classpath.run"/>
    </java>
  </target>

  <!-- INFO: The test target executes all tests in the test directory, or alternatively it executes a single test which is specified by the 'test.class.name' property, e.g. './build.sh test -Dtest.class.name=org.wyona.yarep.tests.VirtualFilesystemRevisionsTest' -->
  <target name="test" description="Run all tests or a particular test using the property 'test.class.name'" depends="clean, init, build-examples">
    <mkdir dir="build/log"/>
    <junit fork="yes" printsummary="yes" haltonfailure="no" showoutput="yes" failureproperty="tests.failed">
      <formatter type="plain" usefile="false" />
      <formatter type="xml"/>
      <classpath refid="classpath.run" />

      <!-- Execute all tests if property test.class.name has not been specified -->
      <batchtest todir="build/log" unless="test.class.name">
        <fileset dir="${classes.dir}" includes="**/*Test.class" excludes="**/Abstract*.class"/>
      </batchtest>

      <!-- Execute a particular test -->
      <test todir="build/log" name="${test.class.name}" if="test.class.name"/>
    </junit>
    <fail if="tests.failed"  message="One or more junit tests failed. Please check the log (build/log)."/>
  </target>

  <target name="javadoc" description="Generate Javadoc" depends="init">
    <javadoc
      packagenames="org.*"
      sourcepath="src/core/java"
      destdir="build/javadoc"
    >
    </javadoc>
  </target>

  <target name="compile-tools" description="Build tools" depends="compile-examples, compile-impl">
    <javac srcdir="src/tools/java" destdir="${classes.dir}"
           classpathref="classpath.impl"
           debug="true"
           source="${source.java.version}"
           target="${target.java.version}"
    />
  </target>


  <target name="copy-repository" description="Copy repository" depends="init">
    <!-- <taskdef name="copyrepository" classpath="${classes.dir}" classname="org.wyona.yarep.tools.ant.CopyRepositoryTask"/> -->
    <taskdef name="copyrepository" classpathref="classpath.run" classname="org.wyona.yarep.tools.ant.CopyRepositoryTask"/>
    <copyrepository
      srcrepoconfigpath="${copy.src.repo.config}"
      destrepoconfigpath="${copy.dest.repo.config}"
    />
  </target>


</project>
